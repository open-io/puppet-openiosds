[DEFAULT]
use_stderr = <%= @use_stderr %>
bind_port = <%= @port %>
workers = <%= @workers %>
user = <%= scope['openiosds::user'] %>
log_facility = <%= @log_facility %>
log_level = <%= @log_level %>
eventlet_debug = <%= @eventlet_debug %>

sds_namespace = <%= @ns %>
sds_proxy_url = <%= @sds_proxy_url %>
sds_default_account = <%= @sds_default_account %>

sds_connection_timeout = <%= @sds_connection_timeout %>
sds_read_timeout = <%= @sds_read_timeout %>
sds_write_timeout = <%= @sds_write_timeout %>

sds_pool_connections = <%= @sds_pool_connections %>
sds_pool_maxsize = <%= @sds_pool_maxsize %>
sds_max_retries = <%= @sds_max_retries %>

<% if @auto_storage_policies and @oio_storage_policies -%>
oio_storage_policies=<%= @oio_storage_policies %>
auto_storage_policies=<%= @auto_storage_policies %>
<% end -%>

[pipeline:main]
pipeline = catch_errors <% if @middleware_hashedcontainer -%>proxy-logging hashedcontainer<% end -%> <% if @middleware_gatekeeper -%>gatekeeper<% end -%> <% if @middleware_healthcheck -%>healthcheck<% end -%> proxy-logging cache bulk tempurl proxy-logging ratelimit <% if @auth_system == 'keystone' -%>authtoken <% end -%><% if @middleware_swift3 -%>swift3 <% end -%><% if @auth_system == 'keystone' -%>s3token <% end -%><%= @auth_filter -%> <% if @middleware_regexcontainer -%> proxy-logging regexcontainer <% end -%><% if @middleware_containerhierarchy -%> proxy-logging container_hierarchy <% end -%> staticweb copy container-quotas account-quotas slo dlo versioned_writes proxy-logging proxy-server

[app:proxy-server]
use = egg:oioswift#main
bind_ip = <%= @ipaddress %>
object_post_as_copy = <%= @object_post_as_copy %>
allow_account_management = true
account_autocreate = true
log_name = OIO,<%= @ns %>,<%= @type %>,<%= @num %>

[filter:bulk]
use = egg:swift#bulk

[filter:slo]
use = egg:swift#slo

[filter:dlo]
use = egg:swift#dlo

[filter:staticweb]
use = egg:swift#staticweb

[filter:account-quotas]
use = egg:swift#account_quotas

[filter:container-quotas]
use = egg:swift#container_quotas

[filter:versioned_writes]
use = egg:swift#versioned_writes
allow_versioned_writes = true

[filter:crossdomain]
use = egg:swift#crossdomain

<% if @auth_system == 'tempauth' -%>
[filter:tempauth]
use = egg:swift#tempauth
<% @tempauth_users.each do |cred|
     user1,user2,passwd,priv = cred.split(':') -%>
user_<%= user1 %>_<%= user2 %>=<%= passwd %> <%= priv %>
<% end -%>
<% end -%>

<% if @auth_system == 'keystone' -%>
[filter:authtoken]
paste.filter_factory = keystonemiddleware.auth_token:filter_factory
auth_type = password
auth_url = <%= @auth_url %>
auth_uri = <%= @auth_uri %>
insecure = True
region_name = <%= @region_name %>
project_domain_id = <%= @project_domain_id %>
user_domain_id = <%= @user_domain_id %>
project_name = <%= @project_name %>
username = <%= @username %>
password = <%= @password %>
delay_auth_decision = True
include_service_catalog = False
memcached_servers = <%= @memcache_servers %>
cache = swift.cache
token_cache_time = 300
revocation_cache_time = 60
memcache_security_strategy = ENCRYPT
memcache_secret_key = <%= @memcache_secret_key %>
<% end -%>

<% if @auth_system == 'keystone' -%>
[filter:keystoneauth]
use = egg:swift#keystoneauth
operator_roles = <%= @operator_roles %>

<% end -%>
<% if @middleware_gatekeeper -%>
[filter:gatekeeper]
use = egg:swift#gatekeeper
<% @middleware_gatekeeper.each do |k,v| -%>
<%= k %> = <%= v %>
<% end -%>

<% end -%>
[filter:proxy-logging]
use = egg:swift#proxy_logging
access_log_headers = <%= @access_log_headers %>
access_log_headers_only = <%= @access_log_headers_only %>

[filter:tempurl]
use = egg:swift#tempurl

[filter:catch_errors]
use = egg:swift#catch_errors

[filter:ratelimit]
use = egg:swift#ratelimit

<% if @middleware_healthcheck -%>
[filter:healthcheck]
use = egg:swift#healthcheck
<% @middleware_healthcheck.each do |k,v| -%>
<%= k %> = <%= v %>
<% end -%>

<% end -%>
[filter:cache]
use = egg:swift#memcache
memcache_servers = <%= @memcache_servers %>
memcache_max_connections = <%= @memcache_max_connections %>

<% if @middleware_swift3 -%>
[filter:swift3]
use = egg:swift3#swift3
force_swift_request_proxy_log = true
<% @middleware_swift3.each do |k,v| -%>
<%= k %> = <%= v %>
<% end -%>
<% end -%>

[filter:copy]
use = egg:swift#copy
object_post_as_copy = false

<% if @auth_system == 'keystone' -%>
[filter:s3token]
use = egg:swift3#s3token
auth_uri = <%= @auth_url %>
<% end -%>

<% if @middleware_hashedcontainer -%>
[filter:hashedcontainer]
use = egg:oioswift#hashedcontainer
<% @middleware_hashedcontainer.each do |k,v| -%>
<%= k %> = <%= v %>
<% end -%>
<% end -%>
<% if @middleware_regexcontainer -%>
[filter:regexcontainer]
use = egg:oioswift#regexcontainer
account_first = true
strip_v1 = true
# Set this option to true if you use this middleware along with swift3
swift3_compat = true
stop_at_first_match = true
# Patterns to apply on incoming URLs to deduce the container name.
# The container name will be the concatenation of captured groups.
# The patterns are sorted, and applied successively until one matches the URL.
# If no pattern matches, an error is returned. You should ensure the last
# pattern always matches something.
# pattern1 = (\d{3})/(\d{3})/(\d)\d\d/\d\d(\d)/
# pattern9 = ^/?([^/]+)
<% end -%>
<% if @middleware_containerhierarchy -%>
[filter:container_hierarchy] 
# Spawn containers for each subdirectory, instead of emulating 
# directories with '/' in object names. This middleware must be 
# placed after authentication in the pipeline. 

use = egg:oioswift#container_hierarchy 
#log_level = INFO 

# These options have the same meaning as in hashedcontainer. 
# When using swift3, all 3 must be true. 
account_first = true 
strip_v1 = true 
swift3_compat = true 

# Create empty objects to mark subdirectories. This enables 
# recursive object listings. 
create_dir_placeholders = true 
<% end -%>
