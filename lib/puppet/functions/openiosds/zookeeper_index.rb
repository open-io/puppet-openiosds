# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
#
# Inputs:
#   1st argument: Array of servers each in the form 'ip:port:port'
#   2nd argument: IP to search in
#
# Returned values:
#   -1: element not found
#   otherwise: position of the element in the array (starting at index 1)
#
# Raised errors:
#   Puppet::ParseError: if 1st element is not an Array
#
require 'fileutils'
# ---- original file header ----
#
# @summary
#   Summarise what the function does here
#
Puppet::Functions.create_function(:'openiosds::zookeeper_index') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    unless args[0].class == Array then
      raise Puppet::ParseError, 'zookeeper_index(): 1st argument must be an array'
    end

    in_array = args[0].collect {|x| x[/[^:]*/, 0]}
    searched_elt = args[1]
    res = in_array.index searched_elt
    if res.nil?
      raise Puppet::ParseError, 'zookeeper_index(): Could not find the IP %s in zookeeper declaration %s' % args
    else
      res+1
    end
  
  end
end
